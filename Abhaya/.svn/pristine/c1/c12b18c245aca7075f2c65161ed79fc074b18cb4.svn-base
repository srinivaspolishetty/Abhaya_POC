import { Component, OnInit } from '@angular/core';
import { PageModel } from '../page.model';
import { TripTrackingApiService } from './services/triptracking.api.service';
import { PaginationModel } from '../pagination.model';
import { TripTracking } from './triptracking.model';
import { NgbDateStruct, NgbCalendar } from '@ng-bootstrap/ng-bootstrap';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { TripComponent } from './trip/trip.component';

@Component({
  selector: 'app-trip-tracking',
  templateUrl: './trip-tracking.component.html',
  styleUrls: ['./trip-tracking.component.css']
})
export class TripTrackingComponent implements OnInit {

  public tripTrackingArray:  Array<TripTracking> = [];
  public page: PageModel;
  public p: number;
  searchValue = '';
  public showSearchClear = false;
  private selected: string;
  model: NgbDateStruct;
  maxDate = this.calendar.getToday();
  constructor(private tripTrackingApiService: TripTrackingApiService, private calendar: NgbCalendar, private modalService: NgbModal) {
    this.page = new PageModel(0, 0, 0, 0);
    this.model = this.calendar.getToday();
  }

  ngOnInit() {
    this.getTripTrackings(0, ''); // need to remove param
  }

  refreshData(){
    this.getTripTrackings(0, ''); // need to remove param
  }
  pageChanged(event) {
    this.p = event;
    this.getTripTrackings(this.p - 1, this.searchValue); // need to remove param
  }

  searchData() {
    if (this.searchValue !== undefined) { // need to remove param
      this.getTripTrackings(0, this.searchValue);
      this.showSearchClear = (this.searchValue.length > 4) ? true : false;
    }
  }

  changeDate() {
    this.getTripTrackings(0, this.searchValue); // need to remove param
  }

  clearSearch() {
    this.searchValue = '';
    this.showSearchClear = false;
    this.searchData();
  }


  tripdetails(tripdetails) {
    console.log(tripdetails);
    const modalRef = this.modalService.open(TripComponent, {backdrop: 'static', keyboard: false});
    modalRef.componentInstance.trackingid = tripdetails.sourceId;
  }
  getTripTrackings(page: number, searchValue: string) { // need to remove param
    this.selected = this.model.day + '/' + this.model.month + '/' + this.model.year;
   // this.selected = noDateFlag ? this.selected : '';
    this.tripTrackingApiService.getAll(page, 10, this.selected, searchValue).subscribe((data:  PaginationModel) => {
      this.tripTrackingArray  =  data.content;
      this.page = data.page;
      console.log(this.tripTrackingArray);
    });
  }

}
