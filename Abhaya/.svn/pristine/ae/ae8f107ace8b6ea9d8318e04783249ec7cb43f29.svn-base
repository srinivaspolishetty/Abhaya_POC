import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { TripDetailsApiService } from './services/tripdetails.api.service';
import { TripDetails } from './tripdetails.model';
import { PageModel } from '../page.model';
import { PaginationModel } from '../pagination.model';
import { NgbDateStruct, NgbCalendar } from '@ng-bootstrap/ng-bootstrap';

@Component({
  selector: 'app-trip-details',
  templateUrl: './trip-details.component.html',
  styleUrls: ['./trip-details.component.css']
})
export class TripDetailsComponent implements OnInit {

  public tripDetailsArray: Array<TripDetails> = [];
  public page: PageModel;
  public p: number;
  private selected: string;
  isTripClosed = false;
  openText = 'Open Trips';
  closedText = 'Closed Trips';
  searchValue = '';
  model: NgbDateStruct;
  maxDate = this.calendar.getToday();
  public showSearchClear = false;
    
  constructor(private tripDetailsApiService: TripDetailsApiService, private router: Router, private calendar: NgbCalendar) {
    this.page = new PageModel(0, 0, 0, 0);
    this.model = this.calendar.getToday();
   }

  ngOnInit() {
    this.getTripDetails(0,' ');
  }

   pageChanged(event) {
    this.p = event;
    this.getTripDetails(this.p - 1,this.searchValue);
  }
    
  searchData() {
    if (this.searchValue !== undefined) {
      this.getTripDetails(0, this.searchValue);
      this.showSearchClear = (this.searchValue.length > 4) ? true : false;
    }
  }
  
  clearSearch() {
    this.searchValue = '';
    this.showSearchClear = false;
    this.searchData();
  }

  changeTrip(isTripClosed) {
    this.isTripClosed = isTripClosed;
    this.getTripDetails(0,' ');
  }

  getTripDetails(page: number,searchValue: string) {
    this.selected = this.model.day + '/' + this.model.month + '/' + this.model.year;
    this.tripDetailsApiService.getAll(page, 10, this.isTripClosed,this.selected,searchValue).subscribe((data:  PaginationModel) => {
      this.tripDetailsArray  =  data.content;
      this.page = data.page;
      console.log(this.tripDetailsArray);
    });
  }

  navigateToTrip(tripDetails: TripDetails) {
    if (this.isTripClosed) {
      this.closedTrip(tripDetails);
    } else {
      this.openClosedTrip(tripDetails);
    }
  }
    
  changeDate() {
    this.getTripDetails(0, this.searchValue);
  }
    
   openClosedTrip(tripDetails: TripDetails) {
    this.router.navigate(['/rta/opentrips'],
    { queryParams: { tripId: tripDetails.tripId, rcNumber: tripDetails.rcNumber, citizenMobileNumber: tripDetails.citizenMobileNumber},
    queryParamsHandling: 'merge' });
  }

  closedTrip(tripDetails: TripDetails) {
    this.router.navigate(['/rta/closedtrips'],
    { queryParams: { tripId: tripDetails.tripId, origin: tripDetails.sourceLatLang, destination: tripDetails.destiLatLang},
    queryParamsHandling: 'merge' });
  }

}
