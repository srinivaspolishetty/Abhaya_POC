import { Component, OnInit } from '@angular/core';
import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
import { UserDetails } from '../../../login/userdetails.model';
import { State } from "../../util/states.model";
import { District } from '../../util/district.model';
import { City } from '../../util/city.model';
import { administrativeServiceapi } from "../services/administrative.api.service";
import { MastersServicesApi } from '../../util/services/masters.api';

@Component({
  selector: 'app-administrative',
  templateUrl: './administrative.component.html',
  styleUrls: ['./administrative.component.css']
})
export class AdministrativeComponent implements OnInit {

  userDetails: UserDetails;
  stateDetails: State;
  districtDetails : District;
  cityDetails : City;

  newStateName : string;
  newStateCode : string;
  newDistrictName : string;

  newCityName : string;
  newCityCode : string;

  stateArray: Array<State> = [];
  districtArray: Array<District> = [];
  stateModel : any;
  districtModel: any;
  selectType = '';
  selectedState;
  selectedStateName;
  selectedDistrict;
  selectedDistrictName;
  constructor(public activeModal: NgbActiveModal, private mastersServicesApi: MastersServicesApi, private administrativeServiceapi:administrativeServiceapi) { 
    this.userDetails = JSON.parse(localStorage.getItem('userdetails'));
    this.districtModel = '';
    this.stateModel = '';
  }

  ngOnInit() {
  }

  changeSelect(selectedType){
    if(this.selectType == "District"){
      this.stateModel = '';
      this.getStates();
    }
    if(this.selectType == "City"){
      this.districtModel = '';
      this.stateModel = '';
      this.getStates();
    }
  }


  stateChange(selectedState, event){
    let selectedOptions = event.target['options'];
   let selectedIndex = selectedOptions.selectedIndex;
   let selectElementText = selectedOptions[selectedIndex].text;
   this.selectedState = selectedState;
   this.selectedStateName = selectElementText;
    if(this.selectType == "City"){
      this.districtModel = '';
      this.selectedDistrict = '';
   this.selectedDistrictName = '';
     this.getDistricts(this.selectedState);
    }
  }


  districtChange(selectedDistrict, event){
    let selectedOptions = event.target['options'];
   let selectedIndex = selectedOptions.selectedIndex;
   let selectElementText = selectedOptions[selectedIndex].text;
   this.selectedDistrict = selectedDistrict;
   this.selectedDistrictName = selectElementText;
  }
  
  onSubmit(){
    if(this.selectType == "State"){
      this.stateDetails= new State(null,this.newStateName, this.newStateCode);
      this.createNewState();
    }
    if(this.selectType == "District"){
      this.districtDetails= new District(null,this.newDistrictName, this.newDistrictName, this.selectedState, this.selectedStateName);
      this.createNewDistrict();
    }
    if(this.selectType == "City"){
      this.cityDetails= new City(null,this.newCityName, this.newCityCode, this.selectedDistrict, this.selectedDistrictName, this.selectedState, this.selectedStateName);
      this.createNewCity();
    }
  }

  createNewState(){
    this.administrativeServiceapi.creatState(JSON.stringify(this.stateDetails)).subscribe((data: any) => {
      console.log(data);
      this.activeModal.close('refreshContent');
    }, error => {
      console.log('Error', error);
      this.activeModal.close('Close click');
    });
  }

  createNewDistrict(){
    this.administrativeServiceapi.createDistrict(JSON.stringify(this.districtDetails)).subscribe((data: any) => {
      console.log(data);
      this.activeModal.close('refreshContent');
    }, error => {
      console.log('Error', error);
      this.activeModal.close('Close click');
    });
  }

  createNewCity(){
    this.administrativeServiceapi.createCity(JSON.stringify(this.cityDetails)).subscribe((data: any) => {
      console.log(data);
      this.activeModal.close('refreshContent');
    }, error => {
      console.log('Error', error);
      this.activeModal.close('Close click');
    });
  }

  
  getStates(){
    this.mastersServicesApi.getStates().subscribe((data: State[]) => {
      this.stateArray = data;
      console.log(data);
    });
  }

  getDistricts(value){
    this.mastersServicesApi.getDistricts(value).subscribe((data: District[]) => {
      this.districtArray = data;
      console.log(this.districtArray);
    });
  }

}
