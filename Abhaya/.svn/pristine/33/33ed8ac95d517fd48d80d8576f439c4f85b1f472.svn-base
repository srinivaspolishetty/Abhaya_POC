import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { HorizontalBarChart } from '../util/horizontalbar';
import { PieChart } from '../util/piechart';
import { LiveTrackingServiceAPI } from './services/livetracking.api.service';
import { VehicleApiService } from '../vehicles/services/vehicle.api.service';
import { District } from '../util/district.model';
import { City } from '../util/city.model';
import { MastersServicesApi } from '../util/services/masters.api';
import { UserDetails } from '../../login/userdetails.model';
import { NgbDateStruct, NgbCalendar } from '@ng-bootstrap/ng-bootstrap';
import {PanicSummary} from '../panic-alerts-list/panicsummary.model';
import {NgbDateFRParserFormatter} from '../util/dateformatter';

@Component({
  selector: 'app-livetracking',
  templateUrl: './livetracking.component.html',
  styleUrls: ['./livetracking.component.css']
})
export class LivetrackingComponent implements OnInit {
  districtModel: any;
  cityModel: any;
  districtArray: Array<District> = [];
  panicSummary: Array<PanicSummary> = [];
  videoPanicSummary: PanicSummary = new PanicSummary();
  webPanicSummary: PanicSummary = new PanicSummary();
  cityArray: Array<City> = [];
  userDetails: UserDetails;
  model: NgbDateStruct;

  isTripClosed: boolean;
  horizontalBarChart: HorizontalBarChart = new HorizontalBarChart([636, 375], true, true, false, false, false, false, true,
      'Label of X', 'Label of Y');
  pieChart: PieChart = new PieChart([400, 280], true, false, false, true, false, 'below', '0.35', '');

  // https://plnkr.co/edit/BooZfKJz0nLATpTe1SwH?p=preview
  constructor(private router: Router, private liveTrackingServiceAPI: LiveTrackingServiceAPI,
              private vehicleApiService: VehicleApiService, private mastersServicesApi: MastersServicesApi,
              private calendar: NgbCalendar, private ngbDateFRParserFormatter: NgbDateFRParserFormatter) {

    this.horizontalBarChart.colorScheme = { domain: ['#6742c0'] };
    this.pieChart.colorScheme =  {domain: [ '#5AA454', '#A10A28', '#C7B42C', '#AAAAAA']};

    this.userDetails = JSON.parse(localStorage.getItem('userdetails'));
    this.districtModel = '';
    this.cityModel = '';
    this.model = this.calendar.getToday();
    this.isTripClosed = false;
  }

  vehicleAuthDetails;
  liveVehicleStatus;
  authValue;
  unAuthValue;
  totalAuthCount;
  parkingStatus;
  overSpeedStatus;
  idealStatus;
  routeDeviationStatus;
  selected: string;

  ngOnInit() {

    this.getVehicleAuthDetails();
    this.getLiveVehicleStatus();
    this.getDistricts(this.userDetails.stateId);
    this.getPanicSummary();
    this.getDistrictSummaryChart();
  }
  openTrip() {
    this.router.navigate(['/rta/closedtrips']);
  }


  getDistricts(value) {
    if (value === '') {
      this.districtArray = [];
    }
    this.videoPanicSummary = new PanicSummary();
    this.webPanicSummary = new PanicSummary();
    this.getPanicSummary();
    this.districtModel = '';
    this.mastersServicesApi.getDistricts(value).subscribe((data: District[]) => {
      this.districtArray = data;
    });
  }

  getCities(value) {
    this.cityModel = '';
    if (value === '') {
      this.cityArray = [];
    }
    this.videoPanicSummary = new PanicSummary();
    this.webPanicSummary = new PanicSummary();
    this.getPanicSummary();
    this.mastersServicesApi.getCities(value).subscribe((data: City[]) => {
      this.cityArray = data;
      this.getLiveVehicleStatus();
    });
  }

  cityChange() {
    this.getLiveVehicleStatus();
  }

  changeDate() {
    this.getLiveVehicleStatus();
  }

  getPanicSummary() {
    this.liveTrackingServiceAPI.getPanicSummary('', this.districtModel, this.cityModel).subscribe((data: PanicSummary[]) => {
      this.panicSummary = data;
      for (let count = 0; count < this.panicSummary.length; count++) {
        if (this.panicSummary[count].eventSource === 'WEB') {
            if (this.panicSummary[count].isClosed) {
                this.webPanicSummary.closedCount = this.panicSummary[count].count;
            } else {
                this.webPanicSummary.openCount = this.panicSummary[count].count;
            }
        } else {
            if (this.panicSummary[count].isClosed) {
                this.videoPanicSummary.closedCount = this.panicSummary[count].count;
            } else {
                this.videoPanicSummary.openCount = this.panicSummary[count].count;
            }
        }

      }
    });
  }
  navigateToPanic(eventType, isClosed) {
      this.router.navigate(['/rta/panicalertslist'], { queryParams: { eventType: eventType, isClosed: isClosed } });
   }
   getVehicleAuthDetails() {
    this.liveTrackingServiceAPI.getVehicleAuthDetails().subscribe((data: any) => {
      this.vehicleAuthDetails  =  data;

      for (let i = 0; i < this.vehicleAuthDetails.length; i++) {
        if (this.vehicleAuthDetails[i].authType === 'Auth') {
          this.authValue = this.vehicleAuthDetails[i].count;
        } else {
          this.unAuthValue = this.vehicleAuthDetails[i].count;
        }
      }
    });
    this.vehicleApiService.getAll(0, 10, '', '', '').subscribe((data: any) => {
      this.vehicleAuthDetails  =  data.page;
      this.totalAuthCount = data.page.totalElements;
    });
  }


  getLiveVehicleStatus() {
    const formatDate = this.ngbDateFRParserFormatter.format(this.model);
    this.liveTrackingServiceAPI.gtLiveVehicleStatus(this.userDetails.stateId, this.districtModel, this.cityModel, formatDate)
    .subscribe((data: any) => {
      this.liveVehicleStatus  =  data;
      for (let i = 0; i < this.liveVehicleStatus.length; i++) {
        if (this.liveVehicleStatus[i].statusType === 'Parking Status') {
          this.parkingStatus = this.liveVehicleStatus[i].count;
        }
        if (this.liveVehicleStatus[i].statusType === 'Over Speed') {
          this.overSpeedStatus = this.liveVehicleStatus[i].count;
        }
        if (this.liveVehicleStatus[i].statusType === 'Vehicle Ideal') {
          this.idealStatus = this.liveVehicleStatus[i].count;
        }
        if (this.liveVehicleStatus[i].statusType === 'Route Deviation') {
          this.routeDeviationStatus = this.liveVehicleStatus[i].count;
        }
      }
    });
  }


  getDistrictSummaryChart() {
    this.liveTrackingServiceAPI.getDistrictWiseTracking()
    .subscribe((data: any) => {
      const newdataarray = data;
      const districtNames = ['Anantapur', 'Chittor', 'East Godavari', 'Guntur', 'Ysr Kadapa', 'Kurnool', 'Nellore',
      'Prakasam', 'Srikakulam', 'Vizianagaram', 'West Godavari'];
      districtNames.forEach(function (value) {
        const newOj = {'name': value, 'value': '0'};
        newdataarray.push(newOj);
      });
      this.horizontalBarChart.data = newdataarray;
      const runnigVehicle = data[0].value + data[1].value;
      const stoppedVehicles = 50 - runnigVehicle;
      this.pieChart.data = [
        {'name': 'Running', 'value': runnigVehicle},
        { 'name': 'Stopped', 'value': stoppedVehicles},
      ];

    });
  }

}
